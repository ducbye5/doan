<?php

namespace Tests\Unit;
use Tests\TestCase;
use Mockery;
use App\Service\S_CustomerService;
use DB;
use Exception;

/**
*	@group S_CustomerService
*/
class S_CustomerServiceTest extends TestCase
{
	private $s_CustomerService;
	private $customersRepository;
	private $profilesRepository;
	private $social_linksRepository;
	public function setUp()
    {
        $this->customersRepository = Mockery::mock('\App\Repository\Interfaces\CustomersRepositoryInterface');
        $this->profilesRepository = Mockery::mock('\App\Repository\Interfaces\ProfilesRepositoryInterface');
        $this->social_linksRepository = Mockery::mock('\App\Repository\Interfaces\Social_linksRepositoryInterface');
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function tearDown()
    {
        Mockery::close();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
    *	@group logincustomer
    **/
    public function test1Login()
    {
    	$result_findByEmail = (object)[
    		'password' => '$2y$10$IaKa/FI3t.Lswimuimbfx.thV1I.ZbEUW1UHN4VkwfSCQkK5jaScG'
    	];
    	$this->customersRepository
    	     ->shouldReceive('findByEmail')
    	     ->times(1)
    	     ->andReturn($result_findByEmail);
    	$input = [
    		'email' => 'admin@gmail.com',
    		'password' => 'a123456789'
    	];
    	$this->s_CustomerService = new S_CustomerService(
            $this->customersRepository,
            $this->profilesRepository,
            $this->social_linksRepository
        );
        $result = $this->s_CustomerService->login($input);
        $this->assertTrue($result);
    }

    /**
    *   @group logincustomer
    **/
    public function test2Login()
    {
        $result_findByEmail = (object)[
            'password' => 'abcxyz'
        ];
        $this->customersRepository
             ->shouldReceive('findByEmail')
             ->times(1)
             ->andReturn($result_findByEmail);
        $input = [
            'email' => 'admin@gmail.com',
            'password' => 'a123456789'
        ];
        $this->s_CustomerService = new S_CustomerService(
            $this->customersRepository,
            $this->profilesRepository,
            $this->social_linksRepository
        );
        $result = $this->s_CustomerService->login($input);
        $this->assertFalse($result);
    }

    /**
    *   @group registcustomer
    **/
    public function test1Regist()
    {
        $expected_results = 'message';
        $input = [
            'fullname' => 'Đỗ Minh Đức',
            'email' => 'admin@gmail.com',
            'password' => 'a123456789'
        ];
        $result_true = true;
        $result_id = 1;
        $result_findByEmail = (object)[
            'password' => '$2y$10$IaKa/FI3t.Lswimuimbfx.thV1I.ZbEUW1UHN4VkwfSCQkK5jaScG'
        ];
        DB::shouldReceive('beginTransaction')
            ->times(1)
            ->andReturn($result_true);
        $this->social_linksRepository
            ->shouldReceive('createAndGetID')
            ->times(1)
            ->andReturn($result_id);
        $this->profilesRepository
            ->shouldReceive('createAndGetID')
            ->times(1)
            ->andReturn($result_id);
        $this->customersRepository
            ->shouldReceive('create')
            ->times(1)
            ->andReturn($result_true);
        DB::shouldReceive('commit')
            ->times(1)
            ->andReturn($result_true);
        $this->customersRepository
             ->shouldReceive('findByEmail')
             ->times(1)
             ->andReturn($result_findByEmail);
        $this->s_CustomerService = new S_CustomerService(
            $this->customersRepository,
            $this->profilesRepository,
            $this->social_linksRepository
        );
        $result = $this->s_CustomerService->regist($input);
        $this->assertTrue($result);
    }

    /**
    *   @group registcustomer
    **/
    public function test2Regist()
    {
        $expected_results = 'message';
        $input = [
            'fullname' => 'Đỗ Minh Đức',
            'email' => 'admin@gmail.com',
            'password' => 'a123456789'
        ];
        $result_true = true;
        $result_id = 1;
        $result_findByEmail = (object)[
            'password' => 'zbcxyz'
        ];
        DB::shouldReceive('beginTransaction')
            ->times(1)
            ->andReturn($result_true);
        $this->social_linksRepository
            ->shouldReceive('createAndGetID')
            ->times(1)
            ->andReturn($result_id);
        $this->profilesRepository
            ->shouldReceive('createAndGetID')
            ->times(1)
            ->andReturn($result_id);
        $this->customersRepository
            ->shouldReceive('create')
            ->times(1)
            ->andReturn($result_true);
        DB::shouldReceive('commit')
            ->times(1)
            ->andReturn($result_true);
        $this->customersRepository
             ->shouldReceive('findByEmail')
             ->times(1)
             ->andReturn($result_findByEmail);
        $this->s_CustomerService = new S_CustomerService(
            $this->customersRepository,
            $this->profilesRepository,
            $this->social_linksRepository
        );
        $result = $this->s_CustomerService->regist($input);
        $this->assertFalse($result);
    }

    /**
    *   @group registcustomer
    **/
    public function test3Regist()
    {
        $expected_results = 'message';
        $input = [
            'fullname' => 'Đỗ Minh Đức',
            'email' => 'admin@gmail.com',
            'password' => 'a123456789'
        ];
        $result_true = true;
        $result_false = false;
        $result_id = 1;
        DB::shouldReceive('beginTransaction')
            ->times(1)
            ->andReturn($result_true);
        $this->social_linksRepository
            ->shouldReceive('createAndGetID')
            ->times(1)
            ->andReturn($result_id);
        $this->profilesRepository
            ->shouldReceive('createAndGetID')
            ->times(1)
            ->andReturn($result_id);
        $this->customersRepository
            ->shouldReceive('create')
            ->times(1)
            ->andReturn($result_false);
        DB::shouldReceive('rollback')
            ->times(1)
            ->andReturn($result_true);
        $this->s_CustomerService = new S_CustomerService(
            $this->customersRepository,
            $this->profilesRepository,
            $this->social_linksRepository
        );
        $result = $this->s_CustomerService->regist($input);
        $this->assertFalse($result);
    }


    /**
    *   @group registcustomer
    **/
    public function test4Regist()
    {
        $expected_results = 'message';
        $input = [
            'fullname' => 'Đỗ Minh Đức',
            'email' => 'admin@gmail.com',
            'password' => 'a123456789'
        ];
        $result_true = true;
        $result_id = 1;
        DB::shouldReceive('beginTransaction')
            ->times(1)
            ->andReturn($result_true);
        $this->social_linksRepository
            ->shouldReceive('createAndGetID')
            ->times(1)
            ->andReturn($result_id);
        $this->profilesRepository
            ->shouldReceive('createAndGetID')
            ->times(1)
            ->andReturn($result_id);
        $this->customersRepository
            ->shouldReceive('create')
            ->times(1)
            ->andReturn($result_true);
        DB::shouldReceive('commit')
            ->times(1)
            ->andThrow(new Exception());
        DB::shouldReceive('rollback')
            ->times(1)
            ->andReturn($result_true);
        $this->s_CustomerService = new S_CustomerService(
            $this->customersRepository,
            $this->profilesRepository,
            $this->social_linksRepository
        );
        $result = $this->s_CustomerService->regist($input);
        $this->assertFalse($result);
    }
}