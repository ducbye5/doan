<?php

namespace Tests\Unit;
use Tests\TestCase;
use Mockery;
use App\Service\A_UserService;
use DB;
use Exception;

/**
*	@group A_UserService
*/
class A_UserServiceTest extends TestCase
{
	private $a_UserService;
	private $profilesRepository;
	private $social_linksRepository;
	private $userRepository;
	public function setUp()
    {
        $this->profilesRepository = Mockery::mock('\App\Repository\Interfaces\ProfilesRepositoryInterface');
        $this->social_linksRepository = Mockery::mock('\App\Repository\Interfaces\Social_linksRepositoryInterface');
        $this->userRepository = Mockery::mock('\App\Repository\Interfaces\UserRepositoryInterface');
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function tearDown()
    {
        Mockery::close();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
    *	@group A_UserService_index
    **/

    public function testIndex()
    {
    	$expected_results = [
    		'view' => 'Admin.User.index',
    		'data' => [
    			'profile_fullname' => 'Nguyen Van A',
    			'role' => 'admin',
    			'active' => 'enable',
    			'id' => 1
    		]
    	];
    	$result_getDataForList = [
    			'profile_fullname' => 'Nguyen Van A',
    			'role' => 'admin',
    			'active' => 'enable',
    			'id' => 1
    		];
    	$this->userRepository
    	     ->shouldReceive('getDataForList')
    	     ->times(1)
    	     ->andReturn($result_getDataForList);
    	$this->a_UserService = new A_UserService(
    		$this->profilesRepository,
    		$this->social_linksRepository,
    		$this->userRepository
    	);
    	$result = $this->a_UserService->index();
    	$this->assertEquals($result,$expected_results);
    }

    /**
    *	@group A_UserService_showViewCreate
    **/

    public function testshowViewCreate()
    {
    	$expected_results = [
    		'view' => 'Admin.User.create',
    	];
    	$this->a_UserService = new A_UserService(
    		$this->profilesRepository,
    		$this->social_linksRepository,
    		$this->userRepository
    	);
    	$result = $this->a_UserService->showViewCreate();
    	$this->assertEquals($result,$expected_results);
    }

    /**
    *	@group A_UserService_activeUser
    **/

    public function testactiveUser()
    {
    	$active = 'enabled';
    	$id = 1;
    	$expected_results = true;
    	$result_updateActiveUser = true;
    	$this->userRepository
    	     ->shouldReceive('updateActiveUser')
    	     ->times(1)
    	     ->andReturn($result_updateActiveUser);
    	$this->a_UserService = new A_UserService(
    		$this->profilesRepository,
    		$this->social_linksRepository,
    		$this->userRepository
    	);
    	$result = $this->a_UserService->activeUser($active,$id);
    	$this->assertEquals($result,$expected_results);
    }

    /**
    *	@group A_UserService_regist
    **/
    public function test1Regist()
    {
    	$input = [
    		'email' => 'customer@gmail.com',
    		'password' => 'a123456789'
    	];
    	$result_true = true;
    	$result_createAndGetID = 1;
    	$expected_results = 'admin.user.list';
    	DB::shouldReceive('beginTransaction')
    		->times(1)
    		->andReturn($result_true);
    	$this->profilesRepository
    		->shouldReceive('createAndGetID')
    		->times(1)
    		->andReturn($result_createAndGetID);
    	$this->social_linksRepository
    		->shouldReceive('createAndGetID')
    		->times(1)
    		->andReturn($result_createAndGetID);
    	$this->userRepository
    		->shouldReceive('registAccount')
    		->times(1)
    		->andReturn($result_true);
    	DB::shouldReceive('commit')
    		->times(1)
    		->andReturn($result_true);
    	$this->a_UserService = new A_UserService(
    		$this->profilesRepository,
    		$this->social_linksRepository,
    		$this->userRepository
    	);
    	$result = $this->a_UserService->regist($input);
    	$this->assertEquals($result,$expected_results);
    }


    /**
    *	@group A_UserService_regist
    **/
    public function test2Regist()
    {
    	$input = [
    		'email' => 'customer@gmail.com',
    		'password' => 'a123456789'
    	];
    	$result_true = true;
    	$result_false = false;
    	$result_createAndGetID = 1;
    	$expected_results = 'error.503';
    	DB::shouldReceive('beginTransaction')
    		->times(1)
    		->andReturn($result_true);
    	$this->profilesRepository
    		->shouldReceive('createAndGetID')
    		->times(1)
    		->andReturn($result_createAndGetID);
    	$this->social_linksRepository
    		->shouldReceive('createAndGetID')
    		->times(1)
    		->andReturn($result_createAndGetID);
    	$this->userRepository
    		->shouldReceive('registAccount')
    		->times(1)
    		->andReturn($result_false);
    	DB::shouldReceive('rollback')
    		->times(1)
    		->andReturn($result_true);
    	$this->a_UserService = new A_UserService(
    		$this->profilesRepository,
    		$this->social_linksRepository,
    		$this->userRepository
    	);
    	$result = $this->a_UserService->regist($input);
    	$this->assertEquals($result,$expected_results);
    }

    /**
    *	@group A_UserService_regist
    **/
    public function test3Regist()
    {
    	$input = [
    		'email' => 'customer@gmail.com',
    		'password' => 'a123456789'
    	];
    	$result_true = true;
    	$result_createAndGetID = 1;
    	$expected_results = 'error.503';
    	DB::shouldReceive('beginTransaction')
    		->times(1)
    		->andReturn($result_true);
    	$this->profilesRepository
    		->shouldReceive('createAndGetID')
    		->times(1)
    		->andReturn($result_createAndGetID);
    	$this->social_linksRepository
    		->shouldReceive('createAndGetID')
    		->times(1)
    		->andReturn($result_createAndGetID);
    	$this->userRepository
    		->shouldReceive('registAccount')
    		->times(1)
    		->andReturn($result_true);
        DB::shouldReceive('commit')
            ->times(1)
            ->andThrow(new Exception());
    	DB::shouldReceive('rollback')
    		->times(1)
    		->andReturn($result_true);
    	$this->a_UserService = new A_UserService(
    		$this->profilesRepository,
    		$this->social_linksRepository,
    		$this->userRepository
    	);
    	$result = $this->a_UserService->regist($input);
    	$this->assertEquals($result,$expected_results);
    }

    /**
    *   @group A_UserService_showViewRole
    **/

    public function test1ShowViewRole()
    {
        $expected_results = [
            'view' => 'Admin.User.role',
            'data' => (object)[],
            'role' => (object)[
                'managers','visiter'
            ]
        ];
        $result_getDataForList = (object)[];
        $result_user = (object)[
            'role' => 'admin'
        ];
        $this->userRepository
            ->shouldReceive('getDataForList')
            ->times(1)
            ->andReturn($result_getDataForList);
        \Auth::shouldReceive('user')
            ->times(1)
            ->andReturn($result_user);
        $this->a_UserService = new A_UserService(
            $this->profilesRepository,
            $this->social_linksRepository,
            $this->userRepository
        );
        $result = $this->a_UserService->showViewRole();
        $this->assertEquals($result,$expected_results);
    }

    /**
    *   @group A_UserService_showViewRole
    **/

    public function test2ShowViewRole()
    {
        $expected_results = [
            'view' => 'Admin.User.role',
            'data' => (object)[],
            'role' => (object)[
                'admin','managers','visiter'
            ]
        ];
        $result_getDataForList = (object)[];
        $result_user = (object)[
            'role' => 'administrator'
        ];
        $this->userRepository
            ->shouldReceive('getDataForList')
            ->times(1)
            ->andReturn($result_getDataForList);
        \Auth::shouldReceive('user')
            ->times(1)
            ->andReturn($result_user);
        $this->a_UserService = new A_UserService(
            $this->profilesRepository,
            $this->social_linksRepository,
            $this->userRepository
        );
        $result = $this->a_UserService->showViewRole();
        $this->assertEquals($result,$expected_results);
    }

    /**
    *   @group A_UserService_changeRole
    **/

    public function test1ChangeRole()
    {
        $input = [
            'role' => 'administrator',
            'email' => 'admin@gmail.com'
        ];
        $result_true = true;
        DB::shouldReceive('beginTransaction')
            ->times(1)
            ->andReturn($result_true);
        $this->userRepository
            ->shouldReceive('updateRoleByEmail')
            ->times(1)
            ->andReturn($result_true);
        DB::shouldReceive('commit')
            ->times(1)
            ->andReturn($result_true);
        $this->a_UserService = new A_UserService(
            $this->profilesRepository,
            $this->social_linksRepository,
            $this->userRepository
        );
        $result = $this->a_UserService->changeRole($input);
        $this->assertTrue($result);
    }

    /**
    *   @group A_UserService_changeRole
    **/

    public function test2ChangeRole()
    {
        $input = [
            'role' => 'administrator',
            'email' => 'admin@gmail.com'
        ];
        $exception = new Exception();
        $result_true = true;
        DB::shouldReceive('beginTransaction')
            ->times(1)
            ->andReturn($result_true);
        $this->userRepository
            ->shouldReceive('updateRoleByEmail')
            ->times(1)
            ->andThrow($exception);
        DB::shouldReceive('rollback')
            ->times(1)
            ->andReturn($result_true);
        $this->a_UserService = new A_UserService(
            $this->profilesRepository,
            $this->social_linksRepository,
            $this->userRepository
        );
        $result = $this->a_UserService->changeRole($input);
        $this->assertFalse($result);
    }

    /**
    *	@group A_UserService_edit
    **/

    public function test1Edit()
    {
    	$id = 1;
    	$input = [
            'fullname' => '',
            'sex' => '',
            'birthday' => '',
            'address' => '',
            'telephone' => '',
            'description' => '',
            'facebook' => '',
            'twitter' => '',
            'linkedin' => '',
            'pinterest' => '',
            'skype' => '',
        ];
    	$newFileName = 'image.jpg';
        $result_findByID = [
            0 => [
                'social_links_id' => 1,
                'profile_id' => 1
            ]
        ];
        $result_true = true;
        DB::shouldReceive('beginTransaction')
            ->times(1)
            ->andReturn($result_true);
        $this->userRepository
            ->shouldReceive('findByID')
            ->times(1)
            ->andReturn($result_findByID);
        $this->social_linksRepository
            ->shouldReceive('updateByID')
            ->times(1)
            ->andReturn($result_true);
        $this->profilesRepository
            ->shouldReceive('updateByID')
            ->times(1)
            ->andReturn($result_true);
        DB::shouldReceive('commit')
            ->times(1)
            ->andReturn($result_true);
    	$this->a_UserService = new A_UserService(
    		$this->profilesRepository,
    		$this->social_linksRepository,
    		$this->userRepository
    	);
    	$result = $this->a_UserService->edit($id,$input,$newFileName);
        $this->assertTrue($result);
    }

    /**
    *   @group A_UserService_edit
    **/

    public function test2Edit()
    {
        $id = 1;
        $input = [
            //'fullname' => '',
            'sex' => '',
            'birthday' => '',
            'address' => '',
            'telephone' => '',
            'description' => '',
            'facebook' => '',
            'twitter' => '',
            'linkedin' => '',
            'pinterest' => '',
            'skype' => '',
        ];
        $newFileName = 'image.jpg';
        $result_true = true;
        DB::shouldReceive('beginTransaction')
            ->times(1)
            ->andReturn($result_true);
        DB::shouldReceive('rollback')
            ->times(1)
            ->andReturn($result_true);
        $this->a_UserService = new A_UserService(
            $this->profilesRepository,
            $this->social_linksRepository,
            $this->userRepository
        );
        $result = $this->a_UserService->edit($id,$input,$newFileName);
        $this->assertFalse($result);
    }

    /**
    *   @group A_UserService_delete
    **/
    public function test1Delete()
    {
        $id = 1;
        $expected_results = [
            'route' => 'admin.user.list',
            'oldFileName' => 'avata.jpg'
        ];
        $result_findByID = [
            0 => [
                'social_links_id' => 1,
                'profile_id' => 1,
                'profile_avatar' => 'avata.jpg'
            ]
        ];
        $result_true = true;
        DB::shouldReceive('beginTransaction')
            ->times(1)
            ->andReturn($result_true);
        $this->userRepository
            ->shouldReceive('findByID')
            ->times(1)
            ->andReturn($result_findByID);
        $this->profilesRepository
            ->shouldReceive('findByID')
            ->times(1)
            ->andReturn($result_findByID);
        $this->userRepository
            ->shouldReceive('deleteByID')
            ->times(1)
            ->andReturn($result_true);
        $this->profilesRepository
            ->shouldReceive('deleteByID')
            ->times(1)
            ->andReturn($result_true);
        $this->social_linksRepository
            ->shouldReceive('deleteByID')
            ->times(1)
            ->andReturn($result_true);
        DB::shouldReceive('commit')
            ->times(1)
            ->andReturn($result_true);
        $this->a_UserService = new A_UserService(
            $this->profilesRepository,
            $this->social_linksRepository,
            $this->userRepository
        );
        $result = $this->a_UserService->delete($id);
        $this->assertEquals($result,$expected_results);
    }


    /**
    *   @group A_UserService_delete
    **/
    public function test2Delete()
    {
        $id = 1;
        $result_true = true;
        $exception = new Exception();
        DB::shouldReceive('beginTransaction')
            ->times(1)
            ->andReturn($result_true);
        $this->userRepository
            ->shouldReceive('findByID')
            ->times(1)
            ->andThrow($exception);
        DB::shouldReceive('rollback')
            ->times(1)
            ->andReturn($result_true);
        $this->a_UserService = new A_UserService(
            $this->profilesRepository,
            $this->social_linksRepository,
            $this->userRepository
        );
        $result = $this->a_UserService->delete($id);
        $this->assertFalse($result);
    }

    /**
    *   @group A_UserService_getProfile
    **/

    public function test1GetProfile()
    {
        $id = 1;
        $result_findByID = [
            0 => [
                'social_links_id' => 1,
                'profile_id' => 1,
            ]
        ];
        $expected_results = [
            'view' => ['Admin.User.profile'],
            'data' => [
                0 => [
                    'social_links_id' => 1,
                    'profile_id' => 1,
                ],
                1 => [
                    'social_links_id' => 1,
                    'profile_id' => 1,
                ],
                2 => [
                    'social_links_id' => 1,
                    'profile_id' => 1,
                ]
            ]
        ];
        $this->userRepository
            ->shouldReceive('findByID')
            ->times(1)
            ->andReturn($result_findByID);
        $this->profilesRepository
            ->shouldReceive('findByID')
            ->times(1)
            ->andReturn($result_findByID);
        $this->social_linksRepository
            ->shouldReceive('findByID')
            ->times(1)
            ->andReturn($result_findByID);
        $this->a_UserService = new A_UserService(
            $this->profilesRepository,
            $this->social_linksRepository,
            $this->userRepository
        );
        $result = $this->a_UserService->getProfile($id);
        $this->assertEquals($result,$expected_results);
    }

    /**
    *   @group A_UserService_getProfile
    **/
    public function test2GetProfile()
    {
        $id = Null;
        $expected_results = [
              0 => "Nguyen Van A",
              1 => 1,
              2 => "administrator"
            ];
        $result_user= (object)[
            'id' => 1,
            'role' => 'administrator',
            'profile_id' => 1
        ];
        $result_findByID = [
             'Nguyen Van A'
        ];
        \Auth::shouldReceive('user')
            ->times(1)
            ->andReturn($result_user);
        $this->profilesRepository
            ->shouldReceive('findByID')
            ->times(1)
            ->andReturn($result_findByID);
        $this->a_UserService = new A_UserService(
            $this->profilesRepository,
            $this->social_linksRepository,
            $this->userRepository
        );
        $result = $this->a_UserService->getProfile($id);
        $this->assertEquals($result,$expected_results);
    }
}